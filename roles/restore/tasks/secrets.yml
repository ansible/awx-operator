---

- name: Get secret definition from pvc
  kubernetes.core.k8s_exec:
    namespace: "{{ backup_pvc_namespace }}"
    pod: "{{ ansible_operator_meta.name }}-db-management"
    command: >-
      bash -c "cat '{{ backup_dir }}/secrets.yml'"
  register: _secrets
  no_log: "{{ no_log }}"

- name: Create Temporary secrets file
  ansible.builtin.tempfile:
    state: file
    suffix: .json
  register: tmp_secrets

- name: Write vars to file locally
  ansible.builtin.copy:
    dest: "{{ tmp_secrets.path }}"
    content: "{{ _secrets.stdout }}"
    mode: 0640
  no_log: "{{ no_log }}"

- name: Include secret vars from backup
  ansible.builtin.include_vars: "{{ tmp_secrets.path }}"
  no_log: "{{ no_log }}"

- name: If deployment is managed, set the database_host in the pg config secret
  block:
    - name: Set new database host
      ansible.builtin.set_fact:
        database_host: "{{ deployment_name }}-postgres-{{ supported_pg_version }}"
      no_log: "{{ no_log }}"

    - name: Set tmp postgres secret dict
      ansible.builtin.set_fact:
        _pg_secret: "{{ secrets['postgresConfigurationSecret'] }}"
      no_log: "{{ no_log }}"

    - name: Change postgres host value
      ansible.builtin.set_fact:
        _pg_data: "{{ _pg_secret['data'] | combine({'host': database_host | b64encode}) }}"
      no_log: "{{ no_log }}"

    - name: Create a postgres secret with the new host value
      ansible.builtin.set_fact:
        _pg_secret: "{{ _pg_secret | combine({'data': _pg_data}) }}"
      no_log: "{{ no_log }}"

    - name: Create a new dict of secrets with the new postgres secret
      ansible.builtin.set_fact:
        secrets: "{{ secrets | combine({'postgresConfigurationSecret': _pg_secret}) }}"
      no_log: "{{ no_log }}"
  when: secrets['postgresConfigurationSecret']['data']['type'] | b64decode == 'managed'

- name: Set new receptor secret names
  ansible.builtin.set_fact:
    previous_receptor_ca_name: "{{ previous_deployment_name }}-receptor-ca"
    previous_receptor_tls_name: "{{ previous_deployment_name }}-receptor-work-signing"
  no_log: "{{ no_log }}"

- name: Set new name for receptor secrets using deployment_name
  block:
    - name: Set new receptor secret names
      ansible.builtin.set_fact:
        receptor_ca_name: "{{ deployment_name }}-receptor-ca"
        receptor_work_signing_name: "{{ deployment_name }}-receptor-work-signing"
      no_log: "{{ no_log }}"

    - name: Set tmp dict for receptor secrets
      ansible.builtin.set_fact:
        _ca_secret: "{{ secrets[previous_receptor_ca_name] }}"
        _work_signing_secret: "{{ secrets[previous_receptor_tls_name] }}"
      no_log: "{{ no_log }}"

    - name: Change receptor secret names in tmp dict
      ansible.builtin.set_fact:
        _ca_secret_name: "{{ _ca_secret | combine({'name': receptor_ca_name}) }}"
        _work_signing_secret_name: "{{ _work_signing_secret | combine({'name': receptor_work_signing_name}) }}"
      no_log: "{{ no_log }}"

    - name: Create a new dict of receptor secrets with updated names
      ansible.builtin.set_fact:
        secrets: "{{ secrets | combine({previous_receptor_ca_name: _ca_secret_name, previous_receptor_tls_name: _work_signing_secret_name}) }}"
      no_log: "{{ no_log }}"

- name: Apply secret
  kubernetes.core.k8s:
    state: present
    namespace: "{{ ansible_operator_meta.namespace }}"
    apply: yes
    wait: yes
    definition: "{{ lookup('template', 'secrets.yml.j2') }}"
  no_log: "{{ no_log }}"

- name: Remove ownerReference on restored secrets
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ item.value.name }}"
        namespace: '{{ ansible_operator_meta.namespace }}'
        ownerReferences: null
  loop: "{{ secrets | dict2items }}"
  no_log: "{{ no_log }}"
