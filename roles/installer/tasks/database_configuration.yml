---
- name: Check for specified PostgreSQL configuration
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ postgres_configuration_secret }}'
  register: _custom_pg_config_resources
  when: postgres_configuration_secret | length
  no_log: "{{ no_log }}"

- name: Check for default PostgreSQL configuration
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ ansible_operator_meta.name }}-postgres-configuration'
  register: _default_pg_config_resources
  no_log: "{{ no_log }}"

- name: Check for specified old PostgreSQL configuration secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ old_postgres_configuration_secret }}'
  register: _custom_old_pg_config_resources
  when: old_postgres_configuration_secret | length
  no_log: "{{ no_log }}"

- name: Check for default old PostgreSQL configuration
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ ansible_operator_meta.name }}-old-postgres-configuration'
  register: _default_old_pg_config_resources
  no_log: "{{ no_log }}"

- name: Set old PostgreSQL configuration
  ansible.builtin.set_fact:
    # yamllint disable-line rule:line-length
    old_pg_config: '{{ _custom_old_pg_config_resources["resources"] | default([]) | length | ternary(_custom_old_pg_config_resources, _default_old_pg_config_resources) }}'

- name: Set proper database name when migrating from old deployment
  ansible.builtin.set_fact:
    database_name: "{{ old_pg_config['resources'][0]['data']['database'] | b64decode }}"
    database_username: "{{ old_pg_config['resources'][0]['data']['username'] | b64decode }}"
  when:
    - old_pg_config['resources'] is defined
    - old_pg_config['resources'] | length
  no_log: "{{ no_log }}"

- name: Set default postgres image
  ansible.builtin.set_fact:
    _default_postgres_image: "{{ _postgres_image }}:{{_postgres_image_version }}"

- name: Set PostgreSQL configuration
  ansible.builtin.set_fact:
    _pg_config: '{{ _custom_pg_config_resources["resources"] | default([]) | length | ternary(_custom_pg_config_resources, _default_pg_config_resources) }}'
  no_log: "{{ no_log }}"

- name: Set user provided postgres image
  ansible.builtin.set_fact:
    _custom_postgres_image: "{{ postgres_image }}:{{ postgres_image_version }}"
  when:
    - postgres_image | default([]) | length
    - postgres_image_version is defined and postgres_image_version != ''

- name: Set Postgres image URL
  ansible.builtin.set_fact:
    _postgres_image: "{{ _custom_postgres_image | default(lookup('env', 'RELATED_IMAGE_AWX_POSTGRES')) | default(_default_postgres_image, true) }}"

- name: Run k8s database secret tasks
  block:
    - name: Create Database configuration
      kubernetes.core.k8s:
        apply: true
        definition: "{{ lookup('template', 'secrets/postgres_secret.yaml.j2') }}"
      no_log: "{{ no_log }}"

    - name: Read Database Configuration
      kubernetes.core.k8s_info:
        kind: Secret
        namespace: '{{ ansible_operator_meta.namespace }}'
        name: '{{ ansible_operator_meta.name }}-postgres-configuration'
      register: _generated_pg_config_resources
      no_log: "{{ no_log }}"
  when: not _pg_config['resources'] | default([]) | length

- name: Set PostgreSQL Configuration
  ansible.builtin.set_fact:
    pg_config: '{{ _generated_pg_config_resources["resources"] | default([]) | length | ternary(_generated_pg_config_resources, _pg_config) }}'
  no_log: "{{ no_log }}"

- name: Set actual postgres configuration secret used
  ansible.builtin.set_fact:
    __postgres_configuration_secret: "{{ pg_config['resources'][0]['metadata']['name'] }}"

- name: Store Database Configuration
  ansible.builtin.set_fact:
    awx_postgres_user: "{{ pg_config['resources'][0]['data']['username'] | b64decode }}"
    awx_postgres_pass: "{{ pg_config['resources'][0]['data']['password'] | b64decode }}"
    awx_postgres_database: "{{ pg_config['resources'][0]['data']['database'] | b64decode }}"
    awx_postgres_port: "{{ pg_config['resources'][0]['data']['port'] | b64decode }}"
    awx_postgres_host: "{{ pg_config['resources'][0]['data']['host'] | b64decode }}"
    awx_postgres_sslmode: "{{ pg_config['resources'][0]['data']['sslmode'] |  default('prefer'|b64encode) | b64decode }}"
  no_log: "{{ no_log }}"

- name: Set database as managed
  ansible.builtin.set_fact:
    managed_database: "{{ pg_config['resources'][0]['data']['type'] | default('') | b64decode == 'managed' }}"

- name: Get the old postgres pod information
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "{{ ansible_operator_meta.name }}-postgres-0"
    field_selectors:
      - status.phase=Running
  register: old_postgres_pod

- name: Look up details for this deployment
  kubernetes.core.k8s_info:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: this_awx

- name: Check if postgres pod is running and version 12
  block:
    - name: Set path to PG_VERSION file for given container image
      ansible.builtin.set_fact:
        path_to_pg_version: '{{ postgres_data_path }}/PG_VERSION'

    - name: Get old PostgreSQL version
      kubernetes.core.k8s_exec:
        namespace: "{{ ansible_operator_meta.namespace }}"
        pod: "{{ ansible_operator_meta.name }}-postgres-0"
        command: |
          bash -c """
          cat {{ path_to_pg_version }}
          """
      register: _old_pg_version

    - name: Upgrade data dir from Postgres 12 to 13 if applicable
      ansible.builtin.include_tasks: upgrade_postgres.yml
      when:
        - _old_pg_version.stdout | default('0') | trim == '12'
  when:
    - managed_database
    - this_awx['resources'][0]['status']['upgradedPostgresVersion'] | default('none') != '12'
    - old_postgres_pod['resources'] | length  # upgrade is complete and old pg pod has been removed

- name: Run k8s database creation tasks
  block:
    - name: Create Database if no database is specified
      kubernetes.core.k8s:
        apply: true
        definition: "{{ lookup('template', 'statefulsets/postgres.yaml.j2') }}"
      register: create_statefulset_result

    - name: Scale down Deployment for migration
      ansible.builtin.include_tasks: scale_down_deployment.yml
      when: create_statefulset_result.changed

  rescue:
    - name: Scale down Deployment for migration
      ansible.builtin.include_tasks: scale_down_deployment.yml

    - name: Scale down PostgreSQL statefulset for migration
      kubernetes.core.k8s_scale:
        api_version: apps/v1
        kind: StatefulSet
        name: "{{ ansible_operator_meta.name }}-postgres-13"
        namespace: "{{ ansible_operator_meta.namespace }}"
        replicas: 0
        wait: yes

    - name: Remove PostgreSQL statefulset for upgrade
      kubernetes.core.k8s:
        state: absent
        api_version: apps/v1
        kind: StatefulSet
        name: "{{ ansible_operator_meta.name }}-postgres-13"
        namespace: "{{ ansible_operator_meta.namespace }}"
        wait: yes
      when: create_statefulset_result.error == 422

    - name: Recreate PostgreSQL statefulset with updated values
      kubernetes.core.k8s:
        apply: true
        definition: "{{ lookup('template', 'statefulsets/postgres.yaml.j2') }}"
  when: managed_database

- name: Set Default label selector for custom resource generated postgres
  ansible.builtin.set_fact:
    postgres_label_selector: "app.kubernetes.io/instance=postgres-{{ supported_pg_version }}-{{ ansible_operator_meta.name }}"
  when: postgres_label_selector is not defined

- name: Get the postgres pod information
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ ansible_operator_meta.namespace }}"
    label_selectors:
      - "{{ postgres_label_selector }}"
    field_selectors:
      - status.phase=Running
  register: postgres_pod

- name: Wait for Database to initialize if managed DB
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: '{{ ansible_operator_meta.namespace }}'
    label_selectors:
      - "{{ postgres_label_selector }}"
    field_selectors:
      - status.phase=Running
  register: postgres_pod
  until:
    - "postgres_pod['resources'] | length"
    - "postgres_pod['resources'][0]['status']['phase'] == 'Running'"
    - "postgres_pod['resources'][0]['status']['containerStatuses'][0]['ready'] == true"
  delay: 5
  retries: 60
  when: managed_database

- name: Look up details for this deployment
  kubernetes.core.k8s_info:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: this_awx

- name: Migrate data from old Openshift instance
  ansible.builtin.import_tasks: migrate_data.yml
  when:
    - old_pg_config['resources'] is defined
    - old_pg_config['resources'] | length
    - this_awx['resources'][0]['status']['migratedFromSecret'] is not defined
